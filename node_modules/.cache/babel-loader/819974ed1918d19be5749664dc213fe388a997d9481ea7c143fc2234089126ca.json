{"ast":null,"code":"var _jsxFileName = \"E:\\\\Web_Data_Management\\\\Project_Code\\\\wdm_project\\\\urm_app\\\\src\\\\pages\\\\ChatInterface.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ChatInterface({\n  selectedUser\n}) {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [newMessage, setNewMessage] = useState('');\n  const currentUserId = window.localStorage.getItem('userId');\n  const currentUserType = window.localStorage.getItem('userType');\n  console.log(selectedUser);\n  const handleSendMessage = event => {\n    event.preventDefault();\n    if (newMessage.trim() === '') {\n      return;\n    }\n    const message = {\n      senderId: currentUserId,\n      senderType: currentUserType,\n      receiverId: selectedUser.id,\n      receiverType: selectedUser.usertype,\n      message: newMessage,\n      timestamp: new Date().toISOString()\n    };\n    setMessages(prevMessages => [...prevMessages, message]);\n    axios.post('http://localhost/send_message.php', message).then(response => {\n      // Handle response if needed\n    }).catch(error => {\n      console.error('Error:', error);\n    });\n    setNewMessage('');\n  };\n  useEffect(() => {\n    const fetchAndUpdateMessages = () => {\n      if (!selectedUser || !selectedUser.id) {\n        console.log(\"No selected user to fetch messages for.\");\n        return;\n      }\n      const senderId = currentUserId;\n      const recipientId = selectedUser.id;\n      const data = {\n        senderId: senderId,\n        recipientId: recipientId\n      };\n      axios.post('http://localhost/get_messages.php', data).then(response => {\n        if (response.data.status === 'success') {\n          setMessages(response.data.messages);\n        } else {\n          console.error(response.data.message);\n        }\n      }).catch(error => {\n        console.error(\"Error:\", error);\n      });\n    };\n    fetchAndUpdateMessages();\n  }, [selectedUser, currentUserId]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-header\",\n      children: selectedUser && selectedUser.username ? /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: selectedUser.username\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \" \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 11\n      }, this) // Render a blank heading if no user is selected\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"chat-history\",\n      className: \"chat-history\",\n      children: messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(SenderName, {\n          senderId: message.sender_id\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"timestamp\",\n          children: new Date(message.timestamp).toLocaleString([], {\n            year: 'numeric',\n            month: 'numeric',\n            day: 'numeric',\n            hour: '2-digit',\n            minute: '2-digit'\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"message-data\",\n          children: message.message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 13\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-input\",\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        name: \"message-to-send\",\n        id: \"message-to-send\",\n        rows: \"3\",\n        placeholder: \"Type your message...\",\n        value: newMessage,\n        onChange: e => setNewMessage(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"submit\",\n        type: \"button\",\n        onClick: handleSendMessage,\n        disabled: !selectedUser || !selectedUser.id,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n}\n_s(ChatInterface, \"ppYy//Iy9fHF0/R/fKleZlFUFyc=\");\n_c = ChatInterface;\nfunction SenderName({\n  senderId\n}) {\n  _s2();\n  const [senderName, setSenderName] = useState('');\n  useEffect(() => {\n    const fetchSenderName = async () => {\n      try {\n        const response = await axios.post('http://localhost/get_username.php', {\n          id: senderId\n        });\n        const name = response.data; // Assuming 'username' is the key containing the sender's name\n        console.log(name);\n        setSenderName(name);\n      } catch (error) {\n        console.error(\"Error fetching sender name:\", error);\n      }\n    };\n    fetchSenderName();\n  }, [senderId]);\n  return /*#__PURE__*/_jsxDEV(\"span\", {\n    className: \"sendername\",\n    children: senderName\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 124,\n    columnNumber: 10\n  }, this);\n}\n_s2(SenderName, \"6IQzLfNIkTJVVYx0Yz5BvDYKkDI=\");\n_c2 = SenderName;\nexport default ChatInterface;\nvar _c, _c2;\n$RefreshReg$(_c, \"ChatInterface\");\n$RefreshReg$(_c2, \"SenderName\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","ChatInterface","selectedUser","_s","messages","setMessages","newMessage","setNewMessage","currentUserId","window","localStorage","getItem","currentUserType","console","log","handleSendMessage","event","preventDefault","trim","message","senderId","senderType","receiverId","id","receiverType","usertype","timestamp","Date","toISOString","prevMessages","post","then","response","catch","error","fetchAndUpdateMessages","recipientId","data","status","className","children","username","fileName","_jsxFileName","lineNumber","columnNumber","map","index","SenderName","sender_id","toLocaleString","year","month","day","hour","minute","name","rows","placeholder","value","onChange","e","target","type","onClick","disabled","_c","_s2","senderName","setSenderName","fetchSenderName","_c2","$RefreshReg$"],"sources":["E:/Web_Data_Management/Project_Code/wdm_project/urm_app/src/pages/ChatInterface.js"],"sourcesContent":["\r\nimport React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nfunction ChatInterface({ selectedUser }) {\r\n  const [messages, setMessages] = useState([]);\r\n  const [newMessage, setNewMessage] = useState('');\r\n  const currentUserId = window.localStorage.getItem('userId');\r\n  const currentUserType = window.localStorage.getItem('userType');\r\n  console.log(selectedUser);\r\n  const handleSendMessage = (event) => {\r\n    event.preventDefault();\r\n    if (newMessage.trim() === '') {\r\n      return;\r\n    }\r\n\r\n    const message = {\r\n      senderId: currentUserId,\r\n      senderType: currentUserType,\r\n      receiverId: selectedUser.id,\r\n      receiverType: selectedUser.usertype,\r\n      message: newMessage,\r\n      timestamp: new Date().toISOString(),\r\n    };\r\n\r\n    setMessages((prevMessages) => [...prevMessages, message]);\r\n    axios.post('http://localhost/send_message.php', message)\r\n      .then((response) => {\r\n        // Handle response if needed\r\n      })\r\n      .catch((error) => {\r\n        console.error('Error:', error);\r\n      });\r\n    setNewMessage('');\r\n  };\r\n\r\n  useEffect(() => {\r\n    const fetchAndUpdateMessages = () => {\r\n      if (!selectedUser || !selectedUser.id) {\r\n        console.log(\"No selected user to fetch messages for.\");\r\n        return;\r\n      }\r\n      const senderId = currentUserId;\r\n      const recipientId = selectedUser.id;\r\n      const data = { senderId: senderId, recipientId: recipientId };\r\n      axios.post('http://localhost/get_messages.php', data)\r\n        .then((response) => {\r\n          if (response.data.status === 'success') {\r\n            setMessages(response.data.messages);\r\n          } else {\r\n            console.error(response.data.message);\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.error(\"Error:\", error);\r\n        });\r\n    };\r\n\r\n    fetchAndUpdateMessages();\r\n  }, [selectedUser, currentUserId]);\r\n\r\n  return (\r\n    <div className=\"chat\">\r\n      <div className=\"chat-header\">\r\n        {selectedUser && selectedUser.username ? (\r\n          <h2>{selectedUser.username}</h2>\r\n        ) : (\r\n          <h2> </h2> // Render a blank heading if no user is selected\r\n        )}\r\n        {/* Render chat interface for selected user */}\r\n      </div>\r\n      <div id=\"chat-history\" className=\"chat-history\">\r\n        {messages.map((message, index) => (\r\n          <div key={index}>\r\n            <SenderName senderId={message.sender_id} />\r\n            <span className=\"timestamp\">\r\n              {new Date(message.timestamp).toLocaleString([], {\r\n                year: 'numeric',\r\n                month: 'numeric',\r\n                day: 'numeric',\r\n                hour: '2-digit',\r\n                minute: '2-digit',\r\n              })}\r\n            </span>\r\n            <p className=\"message-data\">{message.message}</p>\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <div className=\"chat-input\">\r\n        <textarea\r\n          name=\"message-to-send\"\r\n          id=\"message-to-send\"\r\n          rows=\"3\"\r\n          placeholder=\"Type your message...\"\r\n          value={newMessage}\r\n          onChange={(e) => setNewMessage(e.target.value)}\r\n        ></textarea>\r\n        <button className=\"submit\" type=\"button\" onClick={handleSendMessage} disabled={!selectedUser || !selectedUser.id}>\r\n          Send\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction SenderName({ senderId }) {\r\n  const [senderName, setSenderName] = useState('');\r\n\r\n  useEffect(() => {\r\n    const fetchSenderName = async () => {\r\n      try {\r\n        const response = await axios.post('http://localhost/get_username.php', { id: senderId });\r\n        const name = response.data; // Assuming 'username' is the key containing the sender's name\r\n        console.log(name);\r\n        setSenderName(name);\r\n      } catch (error) {\r\n        console.error(\"Error fetching sender name:\", error);\r\n      }\r\n    };\r\n\r\n    fetchSenderName();\r\n  }, [senderId]);\r\n\r\n  return <span className=\"sendername\">{senderName}</span>;\r\n}\r\n\r\nexport default ChatInterface;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}